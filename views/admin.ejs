<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - Topic Management</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .topic-card {
            transition: all 0.3s ease;
        }
        .topic-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="text-center mb-12">
            <h1 class="text-5xl font-bold text-white mb-4">
                <i class="fas fa-cogs mr-4"></i>
                Topic Management
            </h1>
            <p class="text-xl text-white/90 max-w-2xl mx-auto">
                Add, edit, or delete essay topics for your writing test platform
            </p>
        </div>

        <!-- Add New Topic Section -->
        <div class="bg-white/10 backdrop-blur-sm rounded-xl p-6 mb-8 max-w-4xl mx-auto">
            <h2 class="text-2xl font-bold text-white mb-6">
                <i class="fas fa-plus-circle mr-3 text-green-400"></i>
                Add New Topic
            </h2>
            <form id="addTopicForm" class="space-y-4">
                <div>
                    <label for="newTopic" class="block text-white font-semibold mb-2">Topic Text:</label>
                    <textarea 
                        id="newTopic" 
                        name="topic" 
                        rows="3" 
                        class="w-full px-4 py-3 rounded-lg border-2 border-white/20 bg-white/10 text-white placeholder-white/60 focus:border-white/40 focus:outline-none resize-none"
                        placeholder="Enter your essay topic here..."
                        required></textarea>
                </div>
                <div class="flex space-x-4">
                    <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300">
                        <i class="fas fa-plus mr-2"></i>
                        Add Topic
                    </button>
                    <button type="button" onclick="clearForm()" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300">
                        <i class="fas fa-eraser mr-2"></i>
                        Clear
                    </button>
                </div>
            </form>
        </div>

        <!-- Topics List -->
        <div class="bg-white/10 backdrop-blur-sm rounded-xl p-6 max-w-4xl mx-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-white">
                    <i class="fas fa-list mr-3 text-blue-400"></i>
                    Current Topics (<span id="topicCount"><%= topics.length %></span>)
                </h2>
                <div class="text-white/80">
                    <i class="fas fa-info-circle mr-2"></i>
                    Click on any topic to edit
                </div>
            </div>

            <div id="topicsList" class="space-y-4">
                <% topics.forEach((topic, index) => { %>
                    <div class="topic-card bg-white/10 backdrop-blur-sm rounded-lg p-4 border-2 border-transparent hover:border-white/20">
                        <div class="flex items-start justify-between">
                            <div class="flex-1">
                                <div class="flex items-center mb-2">
                                    <span class="bg-blue-500 text-white text-xs px-2 py-1 rounded-full mr-3">
                                        #<%= index + 1 %>
                                    </span>
                                    <span class="text-white/60 text-sm">
                                        <%= topic.length %> characters
                                    </span>
                                </div>
                                <p class="text-white text-lg leading-relaxed" id="topic-text-<%= index %>"><%= topic %></p>
                            </div>
                            <div class="ml-4 flex space-x-2">
                                <button onclick="editTopic(<%= index %>)" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg transition-colors duration-300">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button onclick="deleteTopic(<%= index %>)" class="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg transition-colors duration-300">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Navigation -->
        <div class="text-center mt-8 space-x-4">
            <a href="/topics" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 inline-block">
                <i class="fas fa-eye mr-2"></i>
                View Topics Page
            </a>
            <a href="/" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300 inline-block">
                <i class="fas fa-home mr-2"></i>
                Back to Home
            </a>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden items-center justify-center z-50">
        <div class="bg-white rounded-xl p-6 max-w-2xl w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-2xl font-bold text-gray-800">
                    <i class="fas fa-edit mr-2 text-blue-500"></i>
                    Edit Topic
                </h3>
                <button onclick="closeEditModal()" class="text-gray-500 hover:text-gray-700 text-2xl">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="editTopicForm" class="space-y-4">
                <input type="hidden" id="editTopicIndex">
                <div>
                    <label for="editTopicText" class="block text-gray-700 font-semibold mb-2">Topic Text:</label>
                    <textarea 
                        id="editTopicText" 
                        rows="4" 
                        class="w-full px-4 py-3 rounded-lg border-2 border-gray-300 focus:border-blue-500 focus:outline-none resize-none"
                        required></textarea>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" onclick="closeEditModal()" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">
                        Cancel
                    </button>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">
                        <i class="fas fa-save mr-2"></i>
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Success/Error Messages -->
    <div id="messageContainer" class="fixed top-4 right-4 z-50"></div>

    <script>
        // Add new topic
        document.getElementById('addTopicForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const topic = formData.get('topic').trim();
            
            if (!topic) {
                showMessage('Please enter a topic', 'error');
                return;
            }
            
            try {
                const response = await fetch('/admin/add-topic', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ topic })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    this.reset();
                    updateTopicsList(result.topics);
                } else {
                    showMessage(result.error, 'error');
                }
            } catch (error) {
                showMessage('Error adding topic', 'error');
            }
        });

        // Edit topic
        function editTopic(index) {
            const topicText = document.getElementById(`topic-text-${index}`).textContent;
            document.getElementById('editTopicIndex').value = index;
            document.getElementById('editTopicText').value = topicText;
            document.getElementById('editModal').classList.remove('hidden');
            document.getElementById('editModal').classList.add('flex');
        }

        // Close edit modal
        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
            document.getElementById('editModal').classList.remove('flex');
        }

        // Save edited topic
        document.getElementById('editTopicForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const index = document.getElementById('editTopicIndex').value;
            const topic = document.getElementById('editTopicText').value.trim();
            
            if (!topic) {
                showMessage('Please enter a topic', 'error');
                return;
            }
            
            try {
                const response = await fetch(`/admin/edit-topic/${index}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ topic })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    closeEditModal();
                    updateTopicsList(result.topics);
                } else {
                    showMessage(result.error, 'error');
                }
            } catch (error) {
                showMessage('Error updating topic', 'error');
            }
        });

        // Delete topic
        async function deleteTopic(index) {
            if (!confirm('Are you sure you want to delete this topic?')) {
                return;
            }
            
            try {
                const response = await fetch(`/admin/delete-topic/${index}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    updateTopicsList(result.topics);
                } else {
                    showMessage(result.error, 'error');
                }
            } catch (error) {
                showMessage('Error deleting topic', 'error');
            }
        }

        // Update topics list
        function updateTopicsList(topics) {
            const topicsList = document.getElementById('topicsList');
            const topicCount = document.getElementById('topicCount');
            
            topicCount.textContent = topics.length;
            
            topicsList.innerHTML = topics.map((topic, index) => `
                <div class="topic-card bg-white/10 backdrop-blur-sm rounded-lg p-4 border-2 border-transparent hover:border-white/20 fade-in">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center mb-2">
                                <span class="bg-blue-500 text-white text-xs px-2 py-1 rounded-full mr-3">
                                    #${index + 1}
                                </span>
                                <span class="text-white/60 text-sm">
                                    ${topic.length} characters
                                </span>
                            </div>
                            <p class="text-white text-lg leading-relaxed" id="topic-text-${index}">${topic}</p>
                        </div>
                        <div class="ml-4 flex space-x-2">
                            <button onclick="editTopic(${index})" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-2 rounded-lg transition-colors duration-300">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button onclick="deleteTopic(${index})" class="bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-lg transition-colors duration-300">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Clear form
        function clearForm() {
            document.getElementById('addTopicForm').reset();
        }

        // Show message
        function showMessage(message, type) {
            const container = document.getElementById('messageContainer');
            const messageDiv = document.createElement('div');
            
            messageDiv.className = `p-4 rounded-lg mb-4 fade-in ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            
            messageDiv.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} mr-2"></i>
                    ${message}
                </div>
            `;
            
            container.appendChild(messageDiv);
            
            setTimeout(() => {
                messageDiv.remove();
            }, 3000);
        }

        // Close modal on outside click
        document.getElementById('editModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeEditModal();
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeEditModal();
            }
        });
    </script>
</body>
</html>
